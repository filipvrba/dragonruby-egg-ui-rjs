import 'Net', './net'

export default class Authorization
  def get_github_access_token(code, &callback)
    uri = "#{env.VITE_URL_API}/github/access_token?client_id=#{env.VITE_CLIENT_ID}" +
      "&database=#{env.VITE_DATABASE}&code=#{code}&scope=#{env.VITE_SCOPE}"

    Net.get_json(uri) do |data|
      callback(data) if callback
    end
  end

  def get_github_data(url, github_result, &callback)
    get_json(url, github_result) do |data|
      callback(data) if callback
    end
  end

  def get_json url, github_result, &callback
    fetch(url, {
      headers: {
        'authorization': "#{github_result[:token_type]} #{github_result[:access_token]}"
      }
    })
    .then(lambda do |response|
      response.json()
    end)
    .then(lambda do |data|
      if data.message
        console.error("GET: #{data.message}")
        callback([]) if callback
      else
        callback(data) if callback
      end
    end)
  end

  def github_callback(&callback)
    url_params = URLSearchParams.new(location.search)
    code = url_params.get('code')
    if code
      authorization.get_github_access_token(code) do |result|
        window.history.replaceState(nil, nil, '/')
  
        if result[:scope].indexOf(env.VITE_SCOPE) > -1
          sessionStorage.setItem(:access_token, result[:access_token])
          callback(result) if callback
        end
      end
    else
      callback(nil) if callback
    end
  end
end